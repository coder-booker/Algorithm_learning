They are so smart. 
What I can do is to drop some fixed practices for certain algorithms. 

Complexity: 
    1. only nested loop makes more complexity. multiple separate loops are still in O(n)
general: 
    1. try to do it manually once
    2. 可能有用的关键字：相邻/连续、最大最小、以此开头/结尾
    3. 留意题目要求的输出，有时候某些信息不一定需要在算法中被保留（eg 求最大子数组和不需要子数组索引）
    4. 贪心
    5. % 可以用来 range control (189.cpp 轮转数组)
    6. 随机链表拷贝（138.cpp）
    i++ or ++i: 
        i++: return i, then i = i + 1
        ++i: i = i + 1, then return i
sort: 
    c++ normally consumes nlogn
in-place algorithm: 
    1. use the original/part of array to store the result. then O(1) space complexity
    2. use a single extra variable to store the result. then O(1) space complexity

dp: 
    1. how to define dp[i]?
    2. how to update dp[i+1] from dp[i]?
    3. how to get the result from dp?
    some abstract mindset: 
        how to keep transfering the state? (states can be +ve or -ve states that benefit or harm the result respectively)
    4. 自底向上（递推），自顶向下（暴力递归+备忘录＋剪枝）
    常见方法：
        前缀和
        暴力递归
        递归
        备忘录
moving windows:
    1. when to move left and right?
    2. when to stop moving left and right?
    3. how to update the result?
    4. 关键不在于怎么停在最优的left和right，而在于怎么遍历所有有利可能性
    there are two types of moving windows: 
        1. left = right = begin;
        2. left = begin, right = end;
linked list: 
    1. typical questions: 
        nth node from the end.
        half from the end. 
        dummy list
        intersection (linked list concatentation) (可以理解为对齐一定相同的尾部)
    2. dummy node can be used as the head node of modified linked list (so even if it is the original first node that changed, the dummy node is still the head)
    3. delete ==> 2 ptrs(被删除的那个，接上的前一个). swap ==> 3 ptrs(被swap的俩，接上的前一个)
    4. recursion is useful but costly. iteration is space saving but harder to implement.
tree: 
    前序是进入，后序是退出，中序是前序切换后序
    遍历思路：前序；分解问题思路：后序
    前序能利用参数，后序能利用参数和返回值；对于需要递归检查某种约束，前序和后序都有可取之处：前序可以传递参数，后序可以获得子最优解 （*************递归与递推的异同****************）
    如果要储存所有叶子节点，空间复杂度是O(n)（O(2^(round_down(log(n)) + 1)) = O(n+1) = O(n)
    BFS: 用queue，DFS: 用stack
    BST
        二叉查找/搜索/排序树
        中序遍历是升序的数组
        有序数组构建二叉搜索树会变成链表
    平衡二叉树
        ＝平衡的二叉搜索树
        每个节点的左右子树高度差不超过1
        有序数组不会有链表的情况出现
        AVL树，红黑树都是平衡二叉搜索树
graph theory:
    本质上就是交叉的树，可以用标记来模拟成每个节点最多四个子节点的树
queue: 
    FIFO
    .push(), .pop(), .front(), .back(), .empty()
    priority queue: 
        implemented by heap, therefore have priority. 
stack:
    s.top(); s.pop(); s.push();
vector:
    v.insert(v.end(), v2.begin(), v2.end());

Recursion
- base case: 除了null，还可以看看a是否＞b（在a或b会被绝对数值增减的情况下，例如+1 -1）

to_learn:
    1. 前序中序后序遍历的迭代实现和Morris遍历
    2. 为什么这个优先队列可以插入NULL?????：
        priority_queue<ListNode*, vector<ListNode*>, function<bool(ListNode*, ListNode*)>> pq(
            [] (ListNode* a, ListNode* b) { return a->val > b->val; });
    4. 二叉树、红黑树、avl树
    5. 1382.cpp的原地算法
    6. 105索引问题还没想明白

other: 
    148 skipped
    437 skipped



to do：
    - dp 找一道做一做
    - mv window 雨水和任意一道
    - tree 层序遍历，各种遍历方法